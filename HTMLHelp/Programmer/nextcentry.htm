<html>
	<head>
		<title>NextCEntry</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
	</head>
	<body bgcolor="#ffffff">
		<p><font color="#000000" size="4"><strong>NextCEntry</strong></font></p>
		<table border="0" cellpadding="0" cellspacing="3" width="100%">
			<tr>
				<td width="100%" bgcolor="#e6e6e6"><pre>DWORD NextCEntry(
	LPCOMLIST lpCList,
	LPDWORD   lpdwAnchor,
	LPDWORD	  lpdwCType,
	LPDWORD   lpdwCData
);</pre>
				</td>
			</tr>
		</table>
		<p>Iterates a command list returning the command types and data of the command list 
			entries.</p>
		<ul type="disc">
			<li>
				Returns non-zero when there are entries still available and zero when you have 
				reached the end of the command list.</li>
		</ul>
		<dl>
			<dt><em>lpCList</em>
				<dd>
					A pointer a command list to iterate that has previously been created with the <a href="createclist.htm">
						CreateCList</a> function. <dt><em>lpdwAnchor</em>
						<dd>
							A pointer to the anchor value returned by this function. Initially this should 
							hold zero. See the example code below. <dt><em>lpdwCType</em>
								<dd>
									This should be a pointer to a DWORD value in which the command type is stored. 
									This type can be any of the following values:<br>
									<br>
									<ul type="disc">
										<li>
										CTYPE_HARDCODED
										<li>
										CTYPE_TEXT
										<li>
										CTYPE_RUN
										<li>
											CTYPE_SHELLOPEN</li>
									</ul>
									<dt><em>lpdwCData</em>
										<dd>
											This should be a pointer to a DWORD value in which the data for the command is 
											stored. Depending on the contents of the <strong>lpdwCType</strong> contents 
											this function will store the following data:<br>
											<br>
											<ul type="disc">
												<li>
													CTYPE_HARDCODED<br>
													The command identifier for the <a href="commands.htm">hardcoded command</a>
												to execute.
												<li>
													CTYPE_TEXT<br>
												A pointer to the 0-terminated text to insert.
												<li>
													CTYPE_RUN<br>
												A pointer to a 0-terminated string containing the command and parameters to 
												execute.
												<li>
													CTYPE_SHELLOPEN<br>
													A pointer to a 0-terminated string containing the document to open using the 
													ShellExecute function.</li>
											</ul>
										</dd>
		</dl>
		<p><strong>Sample</strong></p>
		<table border="0" cellpadding="0" cellspacing="3" width="100%" bgcolor="#e6e6e6" bordercolor="#ffffff" bordercolordark="#ffffff" bordercolorlight="#ffffff">
			<tr>
				<td><pre>/*
 *	IterateCList -
 *		Iterate a command list.
 */

static LPCTSTR lpszType[] =
{
	"\tCTYPE_HARDCODED : ",
	"\tCTYPE_TEXT : ",
	"\tCTYPE_RUN : ",
	"\tCTYPE_SHELLOPEN : "
};

void IterateCList( LPCOMLIST lpcl, HWND hParent )
{
	/*
	 *	Note that the "dwAnchor" value _must_
	 *	be initialized to 0!
	 */
	DWORD	dwAnchor = 0L, dwCType, dwCData;
	TCHAR	sz[ 1024 ];

	/*
	 *	Start the string...
	 */
	strncpy( sz, "CList Entries:\n\n", 1024 );

	/*
	 *	Iterate the list constructing a string
	 *	explaining each command list entry.
	 */
	while (( dwAnchor = NextCEntry( lpcl, &amp;dwAnchor, &amp;dwCType, &amp;dwCData )) != 0L )
	{
		/*
		 *	Add entry type.
		 */
		strncat( sz, lpszType[ dwCType ], 1024 );

		/*
		 *	Add entry data.
		 */
		if ( dwCType == CTYPE_HARDCODED )
		{
			TCHAR	num[ 10 ];

			sprintf( num, "%ld", dwCData );
			strncat( sz, num, 1024 );
		}
		else
			strncat( sz, ( LPCTSTR )dwCData, 1024 );

		/*
		 *	Next line...
		 */
		strncat( sz, "\n", 1024 );
	}

	/*
	 *	Show the result.
	 */
	MessageBox( hParent, sz, "NextCEntry", MB_OK );
}</pre>
				</td>
			</tr>
		</table>
	</body>
</html>
