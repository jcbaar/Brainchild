<html>
	<head>
		<title>Programming</title>
		<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
	</head>
	<body>
		<h1>Brainchild Controls</h1>
		<hr>
		<p>A <i>brainchild control</i> is a powerful text editor control making it easy to 
			include text editing capabilities in your own applications. The brainchild 
			control allows the user to edit all kinds of text from small scripts to large 
			source files.</p>
		<p>The following illustration shows a brainchild control containing C++ code.</p>
		<P><IMG alt="" src="control.jpg"></P>
		<h2>Using Brainchild Controls</h2>
		<p>This section describes how to implement the brainchild control in your application.</p>
		<p><b><font size="5">Creating the Brainchild Control</font></b></p>
		<p>Use the <b>CreateWindow</b> or the <b>CreateWindowEx</b> API to create a brainchild 
			control. The class name of the control is <b>BRAINCHILD_CLASS</b>, which is 
			defined in Brainchild.h. Because in most cases this control is used as a child 
			control, the WS_CHILD style should be used. Once created you can <a href="messages.htm">
				send the control messages</a> to load text, save the contents to a 
			file, get status information etc. Below is a small sample which creates a 
			Brainchild control and sizes it to fit inside the client area of it's parent.</p>
		<table border="0" width="100%">
			<tr>
				<td width="100%" bgcolor="#e4e4e4">
					<pre>/*
 *	CreateBrachildControl - Creates a brainchild control
 *	and size it so that it covers the client area of the
 *	parent window.
 *
 *	hInst   - A handle to the program instance.
 *	hParent - A handle to the parent window.
 */
HWND CreateBrainchildControl( HINSTANCE hInst, HWND hParent )
{
	HWND	hControl;
	RECT	rcRect;

	/*
	 *	Get client rectangle of the parent window.
	 */
	GetClientRect( hParent, &amp;rcClient );

	/*
	 *	Create the control.
	 */
	hControl = CreateWindowEx( 0,
				   BRAINCHILD_CLASS,
				   "",
				   WS_CHILD | WS_VSCROLL | WS_HSCROLL | WS_VISIBLE,
				   rcClient.left,
				   rcClient.top, 
				   rcClient.right  - rcClient.left, 
				   rcClient.bottom - rcClinet.top,
				   hParent,
				   NULL,
				   hInst,
				   NULL );

	return hControl;
}</pre>
				</td>
			</tr>
		</table>
		<p><b><font size="5">Default Brainchild Control Message Processing</font></b></p>
		<p>This section describes the standard Windows messages processed by a Brainchild 
			control.</p>
		<table border="0" width="100%">
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_PAINT</td>
				<td width="90%" bgcolor="#e4e4e4">Checks to see wether or not there is an update 
					pending and, if so, will repaint the section to update. When necessary a 
					offscreen rendering environment is created and initial rendering is done there. 
					After painting is done the area to update is rendered on screen using the <b>BitBlt</b>
					API. If, for some reason the offscreen rendering environment could not be 
					created rendering is done onscreen immediatly.</td>
			</tr>
			<TR>
				<TD width="10%" bgColor="#e4e4e4">WM_PRINTCLIENT</TD>
				<TD width="90%" bgColor="#e4e4e4">Basically the same as WM_PAINT only it will render in 
					the input device context instead of the control device context and it will not 
					check if there is an update pending.</TD>
			</TR>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_KEYDOWN<br>
					WM_SYSKEYDOWN</td>
				<td width="90%" bgcolor="#e4e4e4">Keeps track of the qualifier keys and checks to see 
					if the message corresponds to a mapped key combination. If it does the commands 
					mapped to the key combination are executed. If the key combination is not 
					mapped the key is converted to an ASCII representation and the result is 
					inserted into the control contents. Messages not handled are passed to the 
					default window procedure.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_KEYUP<br>
					WM_SYSKEYUP</td>
				<td width="90%" bgcolor="#e4e4e4">Keeps track of the qualifier keys. These messages 
					basically only check to see if the uses releases either the Shift, Control or 
					Alt key. Messages not handled are passed to the default window procedure.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_CHAR</td>
				<td width="90%" bgcolor="#e4e4e4">Checks to see wether the message represents a key 
					which has not yet been handled in the&nbsp; WM_KEYDOWN or WM_SYSKEYDOWN 
					messages. This will allow alted keys like ALT+129 ( ü ) to be entered.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SYSCHAR</td>
				<td width="90%" bgcolor="#e4e4e4">Checks to see wether the message represents a mapped 
					key combination. If the key combination is mapped the message is not passed to 
					the default window procedure.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_ERASEBKGND</td>
				<td width="90%" bgcolor="#e4e4e4">This message does no background rendering. It simply 
					returns 0. <b>WM_PAINT</b> handles all rendering.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SIZE</td>
				<td width="90%" bgcolor="#e4e4e4">This message causes the control to re-compute it's 
					view area and setup it's scrollers. It will also delete the cached offscreen 
					rendering area when it exists. The <b>WM_PAINT</b> will set it up again if 
					necessary.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_CREATE</td>
				<td width="90%" bgcolor="#e4e4e4">Allocates and initializes private data structures and 
					saves its address as window data.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_DESTROY</td>
				<td width="90%" bgcolor="#e4e4e4">Frees the private data structures allocated during <b>WM_CREATE</b>
					processing.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SETFONT</td>
				<td width="90%" bgcolor="#e4e4e4">Checks to see wether the font is a fixed width font. 
					If it is a fixed width font it's handle is saved and the view is recomputed 
					using the new font. After this the control is re-rendered and the message is 
					routed to the default window procedure. If it is not a fixed width font the 
					message is simply routed to the default window procedure and it is not used by 
					the control.
				</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SETCURSOR</td>
				<td width="90%" bgcolor="#e4e4e4">Checks to see if the mouse cursor is located in the 
					client area and, if it is, set the pointer to a IBeam if it is located on 
					normal text, a Arrow if it is located on selected text and DnD is enabled and 
					to a horizontal arrow if it is located on the selection margin.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_HSCROLL<br>
					WM_VSCROLL</td>
				<td width="90%" bgcolor="#e4e4e4">Update the horizontal and vertical scrollers 
					accoordingly.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SETFOCUS</td>
				<td width="90%" bgcolor="#e4e4e4">Creates the caret and send the <a href="nmstatusupdate.htm">NMBC_STATUSUPDATE</a>
					notification message. Also renders the control to show the text selection if 
					necessary.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_KILLFOCUS</td>
				<td width="90%" bgcolor="#e4e4e4">Destroys the caret and renders the control to hide 
					the text selection if necessary.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_GETDLGCODE</td>
				<td width="90%" bgcolor="#e4e4e4">Returns DLGC_WANTALLKEYS.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_LBUTTONDOWN</td>
				<td width="90%" bgcolor="#e4e4e4">Makes sure the controls has the focus and, when drag 
					and drop is enabled, handles the drag and drop when the mouse cursor is located 
					on a text selection. Otherwise qualifier keys are checked and the text 
					selection is initiated or extended. Also the mouse is captured and a timer is 
					setup to handle dragging.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_LBUTTONUP</td>
				<td width="90%" bgcolor="#e4e4e4">Send a <a href="nmstatusupdate.htm">NMBC_STATUSUPDATE</a>
					notification message when a valid text selection was made. Releases mouse 
					capture and kills the timer setup by <b>WM_LBUTTONDOWN</b>.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_MOUSEMOVE</td>
				<td width="90%" bgcolor="#e4e4e4">Extend the text selection depending on the qualifier 
					keys pressed during the <b>WM_LBUTTONDOWN</b> processing to the new mouse 
					cursor position.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_TIMER</td>
				<td width="90%" bgcolor="#e4e4e4">Process the timer messages from the timer setup 
					during <b>WM_LBUTTONDOWN</b>. When the mouse cursor goes outside the client 
					area the view is scrolled into the appropiate direction and a <b>WM_MOUSEMOVE</b>
					is simulated to extend the selection.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_LBUTTONDBLCLK</td>
				<td width="90%" bgcolor="#e4e4e4">Simulates a <b>WM_LBUTTONDOWN</b> with the MK_CONTROL 
					flag set. This will select the word under the mouse cursor and extend the 
					selection by words when the cursor is moved.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SYSCOLORCHANGE</td>
				<td width="90%" bgcolor="#e4e4e4">Recreates internal brushes of the system color used. 
					Also renders the control to show the changes colors.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SHOWWINDOW</td>
				<td width="90%" bgcolor="#e4e4e4">When drag and drop is enabled and the control is made 
					visible the control is registered as OLE drop target. Otherwise the control is 
					unregistered as OLE drop target when necessary.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_CUT</td>
				<td width="90%" bgcolor="#e4e4e4">Cut the current text selection from the control 
					contents and put's it on the clipboard.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_COPY</td>
				<td width="90%" bgcolor="#e4e4e4">Copy the current text selection to the clipboard.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_PASTE</td>
				<td width="90%" bgcolor="#e4e4e4">Paste the clipboard contents into the control 
					contents at the current caret position.</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_CLEAR</td>
				<td width="90%" bgcolor="#e4e4e4">
					<P>Cut the current text selection from the control contents without putting it on the 
						clipboard.</P>
				</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_GETTEXT</td>
				<td width="90%" bgcolor="#e4e4e4">
					<P>Obtain the filename of the control it's contents. This will <b>not</b> get the 
						control contents. Use the <a href="gettext.htm">BCM_GETTEXT</a> message 
						to obtain the control contents.</P>
				</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_GETTEXTLENGTH</td>
				<td width="90%" bgcolor="#e4e4e4">
					<P>Obtain the length of the filename of the control it's contents. This will <b>not</b> 
						get the length of the control contents. Use the <a href="gettextlength.htm">BCM_GETTEXTLENGTH</a>
						message to obtain the control contents size.</P>
				</td>
			</tr>
			<tr>
				<td width="10%" bgcolor="#e4e4e4">WM_SETTEXT</td>
				<td width="90%" bgcolor="#e4e4e4">
					<P>Set the filename of the control it's contents. This will <b>not</b> set the control 
						contents. You should not use this message directly. Use the <a href="setfilename.htm">BCM_SETFILENAME</a>
						message instead.</B></P>
				</td>
			</tr>
		</table>
		<P>&nbsp;</P>
		<p><font size="5"><b>Checking the DLL version.</b></font></p>
		<p>Because some functionallity may require a minimum DLL version or revision the 
			Brainchild.dll and the Brainchild.cpl files have a function called 
			DllGetVersion. These functions are not included in the link libraries and have 
			to be retrieved explicitly using the <b>GetProcAddress</b> API. Here is an 
			example how you can determine wether you have the correct version:</p>
		<table border="0" cellpadding="0" width="100%">
			<tr>
				<td width="100%" bgcolor="#e4e4e4">
					<pre>#include &lt;windows.h&gt;
#include &lt;shlwapi.h&gt;

/*
 *	CheckBCVersion - Checks to see if the Brainchild DLL/CPL
 *			 you specify has at least the specified
 *			 version/revision.
 *
 *	lpszLibName - Name of the library, "brainchild.dll" or
 *		      "brainchild.cpl".
 *	dwVer	    - Minimum version required.
 *	dwRev	    - Minimum revision required.
 */
BOOL CheckBCVersion( LPCTSTR lpszLibName, DWORD dwVer, DWORD dwRev )
{
	HINSTANCE	hMod;
	BOOL		bResult = FALSE;

	/* Load the DLL */
	if (( hMod = LoadLibrary( lpszLibName )) != NULL )
	{
		DLLGETVERSIONPROC	lpfnVerProc;

		/* 
		 * Get the "DllGetVersionProc" function pointer. This should not
		 * fail on the Brainchild dll and cpl files.
		 */
		if (( lpfnVerProc = ( DLLGETVERSIONPROC )GetProcAddress( hMod, TEXT("DllGetVersion ))) != NULL )
		{
			DLLVERSIONINFO	dvi = { 0 };

			dvi.cbSize = sizeof( dvi );
			
			/* Get version information. */
			if ( SUCCEEDED(( *lpfnVerProc )( &amp;dvi )))
			{
				/* Version OK? */
				if ( dvi.dwMajorVersion &gt; dwVer ) bResult = TRUE;
				else if ( dvi.dwMajorVersion == dwVer &amp;&amp; dvi.dwMinorVersion &gt;= dwRev ) bResult = TRUE;
			}
		}
		/* Free the library */
		FreeLibrary( hMod );
	}
	return bResult;
}</pre>
				</td>
			</tr>
		</table>
	</body>
</html>
